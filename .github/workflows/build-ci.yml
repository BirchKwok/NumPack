name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} - Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-14]
        python: ['3.9', '3.10', '3.11', '3.12']
        include:
          # Apple Silicon (M1/M2) builds
          - os: macos-14
            python: '3.9'
            target: 'aarch64-apple-darwin'
          - os: macos-14
            python: '3.10'
            target: 'aarch64-apple-darwin'
          - os: macos-14
            python: '3.11'
            target: 'aarch64-apple-darwin'
          - os: macos-14
            python: '3.12'
            target: 'aarch64-apple-darwin'
          # Intel Mac builds
          - os: macos-latest
            python: '3.9'
            target: 'x86_64-apple-darwin'
          - os: macos-latest
            python: '3.10'
            target: 'x86_64-apple-darwin'
          - os: macos-latest
            python: '3.11'
            target: 'x86_64-apple-darwin'
          - os: macos-latest
            python: '3.12'
            target: 'x86_64-apple-darwin'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          
      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pandas>=2.1.0 pyarrow>=17.0.0 maturin>=1.0,<2.0 numpy>=1.26.0 
          
      # Install system dependencies (Linux)
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      # Cache Cargo dependencies
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
        
      # Run tests
      - name: Run tests
        run: python -m pytest
        
      # Build wheels
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          singlefile: true
          
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python }}
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build_wheels]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install twine
        run: python -m pip install --upgrade twine
        
      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: python -m twine upload dist/*
        